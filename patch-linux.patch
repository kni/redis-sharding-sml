Index: redis-sharding.mlb
==================================================================
--- redis-sharding.mlb
+++ redis-sharding.mlb
@@ -1,11 +1,11 @@
 local
 	$(SML_LIB)/basis/mlton.mlb
 	$(SML_LIB)/basis/basis.mlb
 in
 	ev/hash-array-int.sml
-	ev/ev-kqueue-mlton.sml
+	ev/ev-epoll-mlton.sml
 	sparcl/sparcl-string.sml
 	redis-parser.sml
 	local
 		$(SML_LIB)/basis/build/sources.mlb
 	in

Index: redis-sharding.mlp
==================================================================
--- redis-sharding.mlp
+++ redis-sharding.mlp
@@ -1,8 +1,8 @@
 use "ev/hash-array-int.sml";
-use "ev/ev-kqueue-poly.sml";
+use "ev/ev-epoll-poly.sml";
 use "sparcl/sparcl-string.sml";
 use "redis-parser.sml";
 use "with-poly.sml";
 use "list-buf.sml";
 use "parse-args.sml";
 use "redis-sharding.sml";

Index: with-poly.sml
==================================================================
--- with-poly.sml
+++ with-poly.sml
@@ -12,11 +12,11 @@
 val myStringConcatList = String.concat
 
 
 local 
   open Foreign
-  val libz = loadLibrary "libz.so.6"
+  val libz = loadLibrary "libz.so.1"
   val crc32_zlib_ffi = buildCall3 ((getSymbol libz "crc32"), (cUlong, cString, cUint), cUlong)
 in
   fun crc32_zlib (s:string) : Word32.word = Word32.fromInt (crc32_zlib_ffi (0, s, String.size s))
 end
 
@@ -26,12 +26,12 @@
 local
   open Foreign
   val libc = loadExecutable ()
   val setsockopt_ffi = buildCall5 ((getSymbol libc "setsockopt"), (cInt, cInt, cInt, cConstStar cInt, cInt), cInt) 
 
-  val SOL_SOCKET = 0xffff and SO_REUSEPORT = 0x0200 (* FreeBSD *)
-  (* val SOL_SOCKET = 1 and SO_REUSEPORT = 15 *) (* Linux *)
+  (* val SOL_SOCKET = 0xffff and SO_REUSEPORT = 0x0200 *) (* FreeBSD *)
+  val SOL_SOCKET = 1 and SO_REUSEPORT = 15 (* Linux *)
 in
   fun setsockopt_REUSEPORT fd =
     if setsockopt_ffi(fd, SOL_SOCKET, SO_REUSEPORT, 1, 4) = ~1
     then raise Socket "Cannot set SO_REUSEPORT option on socket"
     else ()

